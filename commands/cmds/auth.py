#          ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñà  ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà
#          ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà ‚ñÄ ‚ñà ‚ñà‚ñà‚ñÑ ‚ñà ‚ñà ‚ñÄ‚ñÑ‚ñÑ‚ñÄ ‚ñà‚ñÄ‚ñÑ ‚ñà‚ñÑ‚ñà ‚ñÑ
#                ¬© Copyright 2024
#            ‚úà https://t.me/kamekuro

# üîí Licensed under CC-BY-NC-ND 4.0 unless otherwise specified.
# üåê https://creativecommons.org/licenses/by-nc-nd/4.0
# + attribution
# + non-commercial
# + no-derivatives

# You CANNOT edit, distribute or redistribute and use for any purpose this file without direct permission from the author.
# All source code is provided for review only.

import httpx
import logging
import traceback

import pyrogram
import pyroboard
from pyrogram import types

import netschoolapi as nsapi

import utils
import dispatch.fsm
from dispatch import filters
from dispatch.routing import Router


auth = Router("auth")
logger = logging.getLogger(__name__)


# Logging out

@auth.on_message(
    filters.command(commands=["deauth", "logout", "–≤—ã—Ö–æ–¥", "–ª–æ–≥–∞—É—Ç"])
    | filters.text("üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞", False)
)
async def deauth(client: pyrogram.Client, message: types.Message):
    user = utils.db.getNSUser(message.from_user.id)
    if not user:
        return await utils.answer(
            message,
            f"ü§® <b>–í—ã –∏—Ç–∞–∫ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!</b>",
            reply_markup=utils.getMenuKB(message.from_user.id) if message.chat.type == pyrogram.enums.chat_type.ChatType.PRIVATE else None
        )

    await utils.answer(
        message,
        f"ü§î <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞?</b>",
        reply_markup=types.InlineKeyboardMarkup([[
            types.InlineKeyboardButton(text="–î–∞, —É–≤–µ—Ä–µ–Ω", callback_data=f"force_deauth")
        ]])
    )


@auth.on_callback_query(
    filters.startswith("force_deauth")
)
async def deauth_cb_force(client: pyrogram.Client, query: types.CallbackQuery):
    user = utils.db.getNSUser(query.from_user.id)
    if not user:
        await query.message.delete()
        return await utils.answer(
            query.message,
            f"ü§® <b>–í—ã –∏—Ç–∞–∫ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!</b>",
            reply_markup=utils.getMenuKB(query.from_user.id) if query.message.chat.type == pyrogram.enums.chat_type.ChatType.PRIVATE else None
        )

    utils.db.save("DELETE FROM accounts WHERE id = ?", query.from_user.id)
    await query.message.delete()
    await utils.answer(
        query.message,
        f"üóë <b>–Ø —É—Å–ø–µ—à–Ω–æ –∑–∞–±—ã–ª –¥–∞–Ω–Ω—ã–µ –æ –í–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ!</b>\n–ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å –æ–ø—è—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /auth",
        reply_markup=utils.getMenuKB(query.from_user.id) if query.message.chat.type == pyrogram.enums.chat_type.ChatType.PRIVATE else None
    )



# Logging in

@auth.on_message(
    pyrogram.filters.private & (
        filters.command(commands=["auth", "login", "–≤–æ–π—Ç–∏", "–ª–æ–≥–∏–Ω"])
        | filters.text("‚ù§Ô∏è –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç", False)
    )
)
async def auth_cmd(client: pyrogram.Client, message: types.Message):
    msg = await utils.answer(
        message,
        f"üïì <b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶</b>",
        reply_markup=types.ReplyKeyboardRemove()
    )
    args = utils.get_raw_args(message)
    user = utils.db.getNSUser(message.from_user.id)

    if (user) and ("force" not in args):
        await msg[0].delete()
        return await utils.answer(
            message,
            f"üòé <b>–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ø–æ–¥ –ª–æ–≥–∏–Ω–æ–º <code>{user[4]}</code></b>\n" \
            f"<b>–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–Ω–∞—á–∞–ª–∞, –∏–ª–∏ –≤–æ–π—Ç–∏ –≤ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç ‚Äî " \
            f"–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/auth force</code></b>",
            reply_markup=utils.getMenuKB(message.from_user.id) if message.chat.type == pyrogram.enums.chat_type.ChatType.PRIVATE else None
        )

    regions = utils.split_list(list(utils.regions.keys()), 9)

    kb = pyroboard.InlineKeyboard(row_width=1)
    for region_key in regions[0]:
        kb.row(types.InlineKeyboardButton(
            text=utils.regions[region_key]['name'],
            callback_data=f"choose_region:{region_key}:from_cmd"
        ))
    kb.paginate(len(regions), 1, f"regions:{{number}}:from_cmd")

    await msg[0].delete()
    await utils.answer(
        message,
        f"ü§î <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω</b>\n" \
        f"–ï—Å–ª–∏ –Ω–µ—Ç –í–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ ‚Äî –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ " \
        f"–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´‚òπ –ù–µ—Ç –º–æ–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞¬ª</b>.",
        reply_markup=kb
    )



# Choosing region

@auth.on_callback_query(
    filters.startswith("regions:")
)
async def get_regions_list(client: pyrogram.Client, query: types.CallbackQuery):
    from_where = query.data.split(":")[2]
    regions = utils.split_list(list(utils.regions.keys()), 9)
    page = int(query.data.split(":")[1])
    page = page if len(regions) >= page else 1

    kb = pyroboard.InlineKeyboard(row_width=1)
    for region_key in regions[page-1]:
        kb.row(types.InlineKeyboardButton(
            text=utils.regions[region_key]['name'],
            callback_data=f"choose_region:{region_key}:{from_where}"
        ))
    if page == len(regions):
        kb.row(types.InlineKeyboardButton(
            text="‚òπ –ù–µ—Ç –º–æ–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞",
            callback_data=f"choose_region:NO_MY_REGION:{from_where}"
        ))
    kb.paginate(len(regions), 1, f"regions:{{number}}:{from_where}")
    
    await utils.edit(
        query.message,
        f"ü§î <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω</b>\n" \
        f"–ï—Å–ª–∏ –Ω–µ—Ç –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ ‚Äî –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ " \
        f"–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´‚òπ –ù–µ—Ç –º–æ–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞¬ª</b>.",
        reply_markup=kb
    )

@auth.on_callback_query(
    filters.startswith("choose_region:")
)
async def get_page_of_regions_list(client: pyrogram.Client, query: types.CallbackQuery):
    from_where = query.data.split(":")[2]
    region_key = query.data.split(":")[1]

    if region_key == "NO_MY_REGION":
        await utils.edit(
            query.message,
            f"üîó <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –í–∞—à ¬´–°–µ—Ç–µ–≤–æ–π –ì–æ—Ä–æ–¥¬ª.</b>\n" \
            f"–ü—Ä–∏–º–µ—Ä: <code>https://sgo.edu-74.ru</code>"
        )
        return await dispatch.fsm.set_state(client, "nsauth:url", query.from_user.id, query.message.chat.id)

    await utils.edit(
        query.message, f"üèò <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)</b>"
    )
    await dispatch.fsm.set_state(
        client, "nsauth:school", query.from_user.id, query.message.chat.id,
        {"url": utils.regions[region_key]['url']}
    )



# Getting url (if the required region is not in the proposed list)

@auth.on_message(
    dispatch.fsm.StateFilter("nsauth:url")
)
async def get_url(client: pyrogram.Client, message: types.Message):
    data = message.state_data

    if not utils.check_url(message.text):
        await utils.answer(
            message,
            f"‚òπÔ∏è <b>–Ø –Ω–µ –Ω–∞—à—ë–ª –≤ –í–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å—Å—ã–ª–∫—É, –∏–ª–∏ –æ–Ω–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞</b>" \
            f"\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return await dispatch.fsm.set_state(client, "nsauth:url", message.from_user.id, message.chat.id)

    try:
        ns = nsapi.NetSchoolAPI(message.text)
    except:
        await utils.answer(
            message,
            f"‚òπÔ∏è <b>–Ø –Ω–µ –Ω–∞—à—ë–ª –≤ –í–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å—Å—ã–ª–∫—É, –∏–ª–∏ –æ–Ω–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞</b>" \
            f"\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return await dispatch.fsm.set_state(client, "nsauth:url", message.from_user.id, message.chat.id)

    data['url'] = message.text

    await ns.close()
    await utils.answer(
        message, f"üèò <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)</b>"
    )
    await dispatch.fsm.set_state(
        client, "nsauth:school", message.from_user.id, message.chat.id, data
    )



# Getting school ID

@auth.on_message(
    dispatch.fsm.StateFilter("nsauth:school")
)
async def get_schools_list(client: pyrogram.Client, message: types.Message):
    data = message.state_data

    try:
        ns = nsapi.NetSchoolAPI(data['url'])
        names = message.text.split()
        link = f"schools/search?withAddress=true"
        for i in names:
            link += f"&name={i}"
        logger.warning(link)
        sc = await ns.request(
            "GET", link
        )
    except nsapi.errors.NoResponseFromServer as e:
        logger.error(e)
        logger.error(traceback.format_exc())
        return await utils.answer(
            message,
            f"‚ö† <b>¬´–°–µ—Ç–µ–≤–æ–π –ì–æ—Ä–æ–¥¬ª –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: [No Response From Server].</b>"
        )
    except nsapi.errors.AuthError as e:
        logger.error(e)
        logger.error(traceback.format_exc())
        out = f"‚ö† <b>¬´–°–µ—Ç–µ–≤–æ–π –ì–æ—Ä–æ–¥¬ª –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.</b>"
        if e:
            out = f"‚ö† <b>¬´–°–µ—Ç–µ–≤–æ–π –ì–æ—Ä–æ–¥¬ª –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>" \
                  f"<pre language=\"error\">{e}</pre>"
        return await utils.answer(
            message, out
        )
    except httpx.HTTPStatusError as e:
        logger.error(e)
        logger.error(traceback.format_exc())
        out = f"‚ö† <b>¬´–°–µ—Ç–µ–≤–æ–π –ì–æ—Ä–æ–¥¬ª –≤–µ—Ä–Ω—É–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –æ—à–∏–±–∫—É.</b>"
        if e:
            out = f"‚ö† <b>¬´–°–µ—Ç–µ–≤–æ–π –ì–æ—Ä–æ–¥¬ª –≤–µ—Ä–Ω—É–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –æ—à–∏–±–∫—É</b>" \
                  f"<pre language=\"error\">{e}</pre>"
        return await utils.answer(
            message, out
        )
    except httpx.ConnectTimeout as e:
        logger.error(e)
        logger.error(traceback.format_exc())
        out = f"‚ö† <b>¬´–°–µ—Ç–µ–≤–æ–π –ì–æ—Ä–æ–¥¬ª –≤–µ—Ä–Ω—É–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –æ—à–∏–±–∫—É.</b>"
        if e:
            out = f"‚ö† <b>¬´–°–µ—Ç–µ–≤–æ–π –ì–æ—Ä–æ–¥¬ª –≤–µ—Ä–Ω—É–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –æ—à–∏–±–∫—É</b>" \
                  f"<pre language=\"error\">{e}</pre>"
        return await utils.answer(
            message, out
        )
    except Exception as e:
        logger.error(e)
        logger.error(traceback.format_exc())
        out = f"‚ö† <b>¬´–°–µ—Ç–µ–≤–æ–π –ì–æ—Ä–æ–¥¬ª –≤–µ—Ä–Ω—É–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –æ—à–∏–±–∫—É.</b>"
        if e:
            out = f"‚ö† <b>¬´–°–µ—Ç–µ–≤–æ–π –ì–æ—Ä–æ–¥¬ª –≤–µ—Ä–Ω—É–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –æ—à–∏–±–∫—É</b>" \
                  f"<pre language=\"error\">{e}</pre>"
        return await utils.answer(
            message, out
        )

    if len(sc) == 0:
        await utils.answer(message, f"‚òπ –Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —ç—Ç—É —à–∫–æ–ª—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return await dispatch.fsm.set_state(
            client, "nsauth:school", message.from_user.id, message.chat.id, data
        )

    schools = []
    for i in sc:
        schools.append({"id": str(i['id']), "name": i['shortName']})
    ss = utils.split_list(schools, 9)

    kb = pyroboard.InlineKeyboard(1)
    for i in ss[0]:
        kb.row(types.InlineKeyboardButton(
            text=i['name'],
            callback_data=f"school:{i['id']}"
        ))
    if len(ss) > 1:
        kb.paginate(len(ss), 1, "qschool:{number}")

    data['allschools'] = schools
    await dispatch.fsm.set_state(
        client, "nsauth:choose_school", message.from_user.id, message.chat.id, data
    )
    await utils.answer(
        message,
        f"üè´ <b>–í—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ</b> <i>(1/{len(ss)})</i>",
        reply_markup=kb
    )


@auth.on_callback_query(
    filters.startswith("qschool:", False)
    & dispatch.fsm.StateFilter("nsauth:choose_school")
)
async def get_page_of_schools_list(client: pyrogram.Client, query: types.CallbackQuery):
    data = query.state_data
    page = int(query.data.split(":")[1])

    schools = data['allschools']
    ss = utils.split_list(schools, 9)

    kb = pyroboard.InlineKeyboard(1)
    for i in ss[page-1 if len(ss) >= page else 0]:
        kb.row(types.InlineKeyboardButton(
            text=i['name'],
            callback_data=f"school:{i['id']}"
        ))
    if len(ss) > 1:
        kb.paginate(len(ss), page if len(ss) >= page else 1, "qschool:{number}")

    data['allschools'] = schools
    await utils.edit(
        query.message,
        f"üè´ <b>–í—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ</b> <i>(1/{len(ss)})</i>",
        reply_markup=kb
    )
    await dispatch.fsm.set_state(
        client, "nsauth:choose_school", query.from_user.id, query.message.chat.id, data
    )


@auth.on_callback_query(
    filters.startswith("school:")
    & dispatch.fsm.StateFilter("nsauth:choose_school")
)
async def auth_get_school_id(client: pyrogram.Client, query: types.CallbackQuery):
    data = query.state_data
    school_id = int(query.data.split(":")[1])
    data['school_id'] = school_id

    await utils.edit(
        query.message,
        f"ü§´ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –í–∞—à –ª–æ–≥–∏–Ω –æ—Ç ¬´–°–µ—Ç–µ–≤–æ–≥–æ –ì–æ—Ä–æ–¥–∞¬ª</b>"
    )
    await dispatch.fsm.set_state(
        client, "nsauth:get_login", query.from_user.id, query.message.chat.id, data
    )



# Getting login

@auth.on_message(
    dispatch.fsm.StateFilter("nsauth:get_login")
)
async def get_login(client: pyrogram.Client, message: types.Message):
    data = message.state_data
    data['login'] = message.text

    await message.delete()
    await utils.answer(
        message,
        f"üîë <b>–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –í–∞—à –ø–∞—Ä–æ–ª—å –æ—Ç ¬´–°–µ—Ç–µ–≤–æ–≥–æ –ì–æ—Ä–æ–¥–∞¬ª</b>"
    )
    await dispatch.fsm.set_state(
        client, "nsauth:get_passwd", message.from_user.id, message.chat.id, data
    )



# Getting password

@auth.on_message(
    dispatch.fsm.StateFilter("nsauth:get_passwd")
)
async def get_password(client: pyrogram.Client, message: types.Message):
    data = message.state_data
    data['password'] = message.text
    await message.delete()

    try:
        ns = nsapi.NetSchoolAPI(data['url'])
        await ns.login(
            user_name=data['login'], password=data['password'],
            school_name_or_id=data['school_id']
        )
    except Exception as e:
        logger.error(e)
        logger.error(traceback.format_exc())
        return await utils.answer(
            message,
            f"‚òπÔ∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è</b>\n" \
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /auth —Å–Ω–æ–≤–∞, –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            reply=False
        )

    user = utils.db.getNSUser(message.from_user.id)
    if not user:
        utils.db.save(
            "INSERT INTO accounts (id, ns_id, ns_url, ns_school_id, " \
            "ns_login, ns_password) VALUES (?, ?, ?, ?, ?, ?)",
            message.from_user.id, ns._student_id, data['url'],
            data['school_id'], data['login'], data['password']
        )
    else:
        utils.db.save(
            "UPDATE accounts SET ns_id = ?, ns_url = ?, ns_school_id = ?, ns_login = ?, " \
            "ns_password= ? WHERE id = ?",
            ns._student_id, data['url'], data['school_id'], data['login'], data['password'],
            message.from_user.id
        )

    await utils.answer(
        message,
        f"üòé <b>–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤–æ—à–ª–∏ —Å –ª–æ–≥–∏–Ω–æ–º</b> <code>{ns._login_data[0]}</code>",
        reply=False, reply_markup=utils.getMenuKB(message.from_user.id) if message.chat.type == pyrogram.enums.chat_type.ChatType.PRIVATE else None
    )
    await ns.full_logout()
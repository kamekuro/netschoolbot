#          ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñà  ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà
#          ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà ‚ñÄ ‚ñà ‚ñà‚ñà‚ñÑ ‚ñà ‚ñà ‚ñÄ‚ñÑ‚ñÑ‚ñÄ ‚ñà‚ñÄ‚ñÑ ‚ñà‚ñÑ‚ñà ‚ñÑ
#                ¬© Copyright 2024
#            ‚úà https://t.me/kamekuro

# üîí Licensed under CC-BY-NC-ND 4.0 unless otherwise specified.
# üåê https://creativecommons.org/licenses/by-nc-nd/4.0
# + attribution
# + non-commercial
# + no-derivatives

# You CANNOT edit, distribute or redistribute and use for any purpose this file without direct permission from the author.
# All source code is provided for review only.

import datetime
import logging
import io
import httpx
import pytz

import pyrogram
import pyroboard
from pyrogram import types

import netschoolapi as nsapi

import dispatch.fsm
import utils
from dispatch import filters
from dispatch.routing import Router
from loader import cache


diary = Router("diary")
logger = logging.getLogger(__name__)


async def genDiary(day: datetime.datetime, week: list, user: list, msg: types.Message):
    try:
        ns = await utils.db.getUserNS(user[0])
        nsUser = await ns.mysettings()
        d = await ns.diary(week[0] if week else None, week[1] if week else None)
        schedule = sorted(d.schedule, key=lambda x: x.day)
    except nsapi.errors.NetSchoolAPIError as e:
        return await utils.edit(
            msg, e
        )

    need_day = None
    for i in schedule:
        if i.day.strftime("%d.%m.%Y") == day.strftime("%d.%m.%Y"):
            need_day = i
            break
    if (not need_day):
        await ns.full_logout()
        kb = pyroboard.InlineKeyboard(1)
        if day.strftime("%d.%m.%Y") == datetime.datetime.now(tz=pytz.timezone("Europe/Moscow")).strftime("%d.%m.%Y"):
            kb.row(types.InlineKeyboardButton(
                text="‚û°Ô∏è –ó–∞–≤—Ç—Ä–∞", callback_data=f"d_tmrrw:{user[0]}"
            ))
        elif day.strftime("%d.%m.%Y") == (datetime.datetime.now(tz=pytz.timezone("Europe/Moscow"))+datetime.timedelta(days=1)).strftime("%d.%m.%Y"):
            kb.row(types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –°–µ–≥–æ–¥–Ω—è", callback_data=f"d_tdy:{user[0]}"
            ))
        kb.row(types.InlineKeyboardButton(
            text="üìÜ –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å", callback_data=f"chday:{user[0]}"
        ))
        kb.row(types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"mmenu:{user[0]}"
        ))
        return await utils.edit(
            msg, "‚òπ <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.</b>",
            reply_markup=kb
        )

    lessons = []
    attachments = {}
    for index, lessn in enumerate(need_day.lessons):
        ltype = "ea" if lessn.is_ea_lesson else "subject"
        hw, hw_desc, marks, debts = "", "", [], []
        for ass in lessn.assignments:
            if ass.mark:
                marks.append(str(ass.mark))
            if ass.type == "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ":
                try:
                    homework: dict = await ns.request(
                        "GET", f"student/diary/assigns/{ass.id}",
                        params={
                            "studentId": nsUser.user_settings.user_id
                        }
                    )
                    hw = homework['assignmentName']
                    if homework.get("description"):
                        hw_desc = homework['description']
                    if homework.get("attachments"):
                        atts = attachments.get(str(index), [])
                        for attach in homework['attachments']:
                            attachs = await ns.request(
                                "POST", f"student/diary/get-attachments?studentId={nsUser.user_settings.user_id}",
                                json={"assignId": [ass.id]}
                            )
                            docname = '.'.join(attach['originalFileName'].split(".")[:-1])
                            ext = attach['originalFileName'].split(".")[-1]
                            file = io.BytesIO()
                            await ns.download_attachment(attach['id'], file)
                            file.name = docname + "." + ext
                            atts.append({
                                "bytes": file, "name": lessn.subject,
                                "docname": docname, "ext": ext
                            })
                        if len(atts) > 0: attachments[str(index)] = atts
                except:
                    hw = ass.content
            if ass.is_duty:
                debts.append(f"{ass.type}" + (f": {ass.content}" if ass.content else ""))
        out = f"{utils.lesson_types[ltype][0]} <b>{lessn.number}. {utils.lesson_types[ltype][1].title()}: {lessn.subject}</b>" \
              f"\nü™ë <b>–ö–∞–±–∏–Ω–µ—Ç:</b> <b><i>{lessn.room if lessn.room else '–Ω–µ —É–∫–∞–∑–∞–Ω'}</i></b>" \
              f"\n‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> <b><i>{lessn.start.strftime('%H:%M')} ‚Äî {lessn.end.strftime('%H:%M')}</i></b>"
        if hw:
            out += f"\nüìù <b>–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:</b> {hw}"
        if hw_desc:
            out += f"\n‚ùï <b>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—Ç —É—á–∏—Ç–µ–ª—è</b>:\n<blockquote expandable>{hw_desc}</blockquote>"
        if marks:
            out += f"\nüíÆ <b>–û—Ü–µ–Ω–∫{'–∞' if len(marks) == 1 else '–∏'}:</b> {', '.join(marks)}"
        if len(debts) > 0:
            out += f"\n‚ùó <b><u>–ó–∞ —ç—Ç–æ—Ç —É—Ä–æ–∫ —É –í–∞—Å —Å—Ç–æ{'–∏' if len(debts) == 1 else '—è'}—Ç ¬´—Ç–æ—á–∫{'–∞' if len(debts) == 1 else '–∏'}¬ª –∑–∞:</b></u>"
            for debt in debts:
                out += f"\n  ‚ñ™Ô∏è <b>{debt}</b>"
        lessons.append(out)
    out = f"üìÜ <b>{need_day.day.strftime('%d.%m.%Y')}</b>\n\n\n" + "\n\n\n".join(lessons)

    await ns.full_logout()

    return {
        "out": out,
        "lessons": lessons,
        "attachments": attachments
    }



@diary.on_message(
    filters.command(["diary", "–¥–Ω–µ–≤–Ω–∏–∫"])
    | filters.text("üìï –î–Ω–µ–≤–Ω–∏–∫", False)
)
async def diary_cmd(client: pyrogram.Client, message: types.Message):
    msg = await utils.answer(message, "üïì –ü–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶")
    user = utils.db.getNSUser(message.from_user.id)
    if not user:
        return await utils.edit(
            msg,
            f"ü§® <b>–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!</b>\n" \
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å."
        )

    today = datetime.datetime.today()
    dd = await genDiary(today, None, utils.db.getUser(message.from_user.id), msg)
    if type(dd) != dict: return

    kb = pyroboard.InlineKeyboard(1)

    msgs_to_del = []
    if (not dd['attachments']) and (len(dd['out']) < 4096):
        kb.row(types.InlineKeyboardButton(
            text="‚û°Ô∏è –ó–∞–≤—Ç—Ä–∞",
            callback_data=f"d_tmrrw:{message.from_user.id}"
        ))
        kb.row(types.InlineKeyboardButton(
            text="üìÜ –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å",
            callback_data=f"chday:{message.from_user.id}"
        ))
        kb.row(types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data=f"mmenu:{message.from_user.id}"
        ))
        await utils.edit(
            msg, dd['out'],
            reply_markup=kb
        )
    else:
        await (msg if type(msg) == types.Message else msg[0]).delete()
        for index, lesson in enumerate(dd['lessons']):
            out = f"üìÜ <b>{today.strftime('%d.%m.%Y')}</b>\n\n{lesson}"
            att = dd['attachments'].get(str(index), [])
            msg = (await utils.answer(
                message, out, reply=False,
                media=[types.InputMediaDocument(x['bytes'], caption=out) for x in att]
            ))[0]
            msgs_to_del.append((msg if type(msg) == types.Message else msg[0]).id)
        await cache.set(f"diary_{message.from_user.id}", {"msgs_to_del": msgs_to_del})
        kb.row(types.InlineKeyboardButton(
            text="‚û°Ô∏è –ó–∞–≤—Ç—Ä–∞",
            callback_data=f"d_tmrrw:{message.from_user.id}"
        ))
        kb.row(types.InlineKeyboardButton(
            text="üìÜ –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å",
            callback_data=f"chday:{message.from_user.id}"
        ))
        kb.row(types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data=f"mmenu:{message.from_user.id}"
        ))
        await utils.answer(
            message,
            f"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –∑–¥–µ—Å—å:</b>",
            reply_markup=kb
        )



@diary.on_callback_query(
    filters.startswith("d_tmrrw:")
)
async def get_diary_tomorrow(client: pyrogram.Client, query: types.CallbackQuery):
    if query.from_user.id != int(query.data.split(":")[1]):
        return await query.answer(
            "‚ö† –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –í–∞—Å!", True
        )
    if await cache.get(f"diary_{query.from_user.id}"):
        msg_ids = (await cache.get(f"diary_{query.from_user.id}"))['msgs_to_del']
        try:
            await client.delete_messages(
                chat_id=query.message.chat.id,
                message_ids=msg_ids if msg_ids else None
            )
        except:
            pass
        await cache.delete(f"diary_{query.from_user.id}")

    await query.answer("üïì –ü–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶", True)

    user = utils.db.getNSUser(query.from_user.id)
    if not user:
        return await utils.edit(
            msg,
            f"ü§® <b>–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!</b>\n" \
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å."
        )

    day = datetime.datetime.today() + datetime.timedelta(days=1)
    week = utils.get_week(day)
    week = week if week != utils.get_week(datetime.datetime.today()) else None
    dd = await genDiary(day, week, utils.db.getUser(query.from_user.id), query.message)
    if type(dd) != dict: return

    kb = pyroboard.InlineKeyboard(1)

    msgs_to_del = []
    if (not dd['attachments']) and (len(dd['out']) < 4096):
        kb.row(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –°–µ–≥–æ–¥–Ω—è",
            callback_data=f"d_tdy:{query.from_user.id}"
        ))
        kb.row(types.InlineKeyboardButton(
            text="üìÜ –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å",
            callback_data=f"chday:{query.from_user.id}"
        ))
        kb.row(types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data=f"mmenu:{query.from_user.id}"
        ))
        await utils.edit(
            query.message, dd['out'],
            reply_markup=kb
        )
    else:
        await query.message.delete()
        for index, lesson in enumerate(dd['lessons']):
            out = f"üìÜ <b>{day.strftime('%d.%m.%Y')}</b>\n\n{lesson}"
            att = dd['attachments'].get(str(index), [])
            msg = (await utils.answer(
                query.message, out, reply=False,
                media=[types.InputMediaDocument(x['bytes'], caption=out) for x in att]
            ))[0]
            msgs_to_del.append((msg if type(msg) == types.Message else msg[0]).id)
        await cache.set(f"diary_{query.from_user.id}", {"msgs_to_del": msgs_to_del})
        kb.row(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –°–µ–≥–æ–¥–Ω—è",
            callback_data=f"d_tdy:{query.from_user.id}"
        ))
        kb.row(types.InlineKeyboardButton(
            text="üìÜ –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å",
            callback_data=f"chday:{query.from_user.id}"
        ))
        kb.row(types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data=f"mmenu:{query.from_user.id}"
        ))
        await utils.answer(
            query.message,
            f"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –∑–¥–µ—Å—å:</b>",
            reply_markup=kb
        )



@diary.on_callback_query(
    filters.startswith("d_tdy:")
)
async def get_diary_tomorrow(client: pyrogram.Client, query: types.CallbackQuery):
    if query.from_user.id != int(query.data.split(":")[1]):
        return await query.answer(
            "‚ö† –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –í–∞—Å!", True
        )
    if await cache.get(f"diary_{query.from_user.id}"):
        msg_ids = (await cache.get(f"diary_{query.from_user.id}"))['msgs_to_del']
        try:
            await client.delete_messages(
                chat_id=query.message.chat.id,
                message_ids=msg_ids if msg_ids else None
            )
        except:
            pass
        await cache.delete(f"diary_{query.from_user.id}")

    await query.answer("üïì –ü–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶", True)

    user = utils.db.getNSUser(query.from_user.id)
    if not user:
        return await utils.edit(
            query.message,
            f"ü§® <b>–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!</b>\n" \
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å."
        )

    day = datetime.datetime.today()
    week = utils.get_week(day)
    week = week if week != utils.get_week(datetime.datetime.today()) else None
    dd = await genDiary(day, week, utils.db.getUser(query.from_user.id), query.message)
    if type(dd) != dict: return

    kb = pyroboard.InlineKeyboard(1)

    msgs_to_del = []
    if (not dd['attachments']) and (len(dd['out']) < 4096):
        kb.row(types.InlineKeyboardButton(
            text="‚û°Ô∏è –ó–∞–≤—Ç—Ä–∞",
            callback_data=f"d_tmrrw:{query.from_user.id}"
        ))
        kb.row(types.InlineKeyboardButton(
            text="üìÜ –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å",
            callback_data=f"chday:{query.from_user.id}"
        ))
        kb.row(types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data=f"mmenu:{query.from_user.id}"
        ))
        await utils.edit(
            query.message, dd['out'],
            reply_markup=kb
        )
    else:
        await query.message.delete()
        for index, lesson in enumerate(dd['lessons']):
            out = f"üìÜ <b>{day.strftime('%d.%m.%Y')}</b>\n\n{lesson}"
            att = dd['attachments'].get(str(index), [])
            msg = (await utils.answer(
                query.message, out, reply=False,
                media=[types.InputMediaDocument(x['bytes'], caption=out) for x in att]
            ))[0]
            msgs_to_del.append((msg if type(msg) == types.Message else msg[0]).id)
        await cache.set(f"diary_{query.from_user.id}", {"msgs_to_del": msgs_to_del})
        kb.row(types.InlineKeyboardButton(
            text="‚û°Ô∏è –ó–∞–≤—Ç—Ä–∞",
            callback_data=f"d_tmrrw:{query.from_user.id}"
        ))
        kb.row(types.InlineKeyboardButton(
            text="üìÜ –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å",
            callback_data=f"chday:{query.from_user.id}"
        ))
        kb.row(types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data=f"mmenu:{query.from_user.id}"
        ))
        await utils.answer(
            query.message,
            f"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –∑–¥–µ—Å—å:</b>",
            reply_markup=kb
        )



@diary.on_callback_query(
    filters.startswith("chday:")
)
async def get_custom_day_to_get_diary(client: pyrogram.Client, query: types.CallbackQuery):
    if query.from_user.id != int(query.data.split(":")[1]):
        return await query.answer(
            "‚ö† –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –í–∞—Å!", True
        )
    if await cache.get(f"diary_{query.from_user.id}"):
        msg_ids = (await cache.get(f"diary_{query.from_user.id}"))['msgs_to_del']
        try:
            await client.delete_messages(
                chat_id=query.message.chat.id,
                message_ids=msg_ids if msg_ids else None
            )
        except:
            pass
        await cache.delete(f"diary_{query.from_user.id}")

    await query.answer("üïì –ü–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶", True)

    user = utils.db.getNSUser(query.from_user.id)
    if not user:
        return await utils.edit(
            query.message,
            f"ü§® <b>–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!</b>\n" \
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å."
        )

    await utils.edit(
        query.message,
        f"üìÜ <b>–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞ –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì " \
        f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024):</b>"
    )
    await dispatch.fsm.set_state(
        client, "diary:get_custom_date",
        query.from_user.id, query.message.chat.id
    )



@diary.on_message(
    dispatch.fsm.StateFilter("diary:get_custom_date")
)
async def get_diary_custom_date(client: pyrogram.Client, message: types.Message):
    msg = await utils.answer(message, "üïì –ü–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶")
    date = message.text

    try:
        day = datetime.datetime.strptime(date, "%d.%m.%Y")
    except:
        await dispatch.fsm.set_state(
            client, "diary:get_custom_date",
            message.from_user.id, message.chat.id
        )
        return await utils.edit(
            msg,
            f"üòî <b>–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í—ã –≤–≤–µ–ª–∏ –¥–∞—Ç—É –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.</b>\n" \
            f"–í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å, " \
            f"–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.\n\n" \
            f"üìÜ <b>–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –¥–∞—Ç—É, —É–∫–∞–∂–∏—Ç–µ –µ—ë –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì " \
            f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024):</b>"
        )

    user = utils.db.getNSUser(message.from_user.id)
    if not user:
        return await utils.edit(
            msg,
            f"ü§® <b>–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!</b>\n" \
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å."
        )

    week = utils.get_week(day)
    week = week if week != utils.get_week(datetime.datetime.today()) else None
    dd = await genDiary(day, week, utils.db.getUser(message.from_user.id), message)
    if type(dd) != dict: return

    kb = pyroboard.InlineKeyboard(1)

    msgs_to_del = []
    if (not dd['attachments']) and (len(dd['out']) < 4096):
        kb.row(types.InlineKeyboardButton(
            text="üìÜ –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å",
            callback_data=f"chday:{message.from_user.id}:ndl"
        ))
        kb.row(types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data=f"mmenu:{message.from_user.id}:ndl"
        ))
        await utils.edit(
            msg, dd['out'],
            reply_markup=kb
        )
    else:
        await (msg if type(msg) == types.Message else msg[0]).delete()
        for index, lesson in enumerate(dd['lessons']):
            out = f"üìÜ <b>{day.strftime('%d.%m.%Y')}</b>\n\n{lesson}"
            att = dd['attachments'].get(str(index), [])
            msg = (await utils.answer(
                message, out, reply=False,
                media=[types.InputMediaDocument(x['bytes'], caption=out) for x in att]
            ))[0]
            msgs_to_del.append((msg if type(msg) == types.Message else msg[0]).id)
        await cache.set(f"diary_{message.from_user.id}", {"msgs_to_del": msgs_to_del})
        kb.row(types.InlineKeyboardButton(
            text="üìÜ –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å",
            callback_data=f"chday:{message.from_user.id}"
        ))
        kb.row(types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data=f"mmenu:{message.from_user.id}"
        ))
        await utils.answer(
            message,
            f"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –∑–¥–µ—Å—å:</b>",
            reply_markup=kb
        )
#          ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñà  ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà
#          ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà ‚ñÄ ‚ñà ‚ñà‚ñà‚ñÑ ‚ñà ‚ñà ‚ñÄ‚ñÑ‚ñÑ‚ñÄ ‚ñà‚ñÄ‚ñÑ ‚ñà‚ñÑ‚ñà ‚ñÑ
#                ¬© Copyright 2024
#            ‚úà https://t.me/kamekuro

# üîí Licensed under CC-BY-NC-ND 4.0 unless otherwise specified.
# üåê https://creativecommons.org/licenses/by-nc-nd/4.0
# + attribution
# + non-commercial
# + no-derivatives

# You CANNOT edit, distribute or redistribute and use for any purpose this file without direct permission from the author.
# All source code is provided for review only.

import datetime
import git
import logging
import time

import pyrogram
from pyrogram import types

import utils
import version
from dispatch import filters
from dispatch.routing import Router
from loader import cache


other = Router("other")
logger = logging.getLogger(__name__)


@other.on_message(
    filters.command(commands=["privacy", "eula"])
)
async def get_privacy(client: pyrogram.Client, message: types.Message):
    await utils.answer(
        message,
        f"üìú <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ: https://teletype.in/@kamekuro/nsbot-eula</b>"
    )


@other.on_message(
    filters.command(commands=["botinfo", "–±–æ—Ç–∏–Ω—Ñ–æ"])
)
async def stats(client: pyrogram.Client, message: types.Message):
    try:
        hash_ = git.Repo().head.commit.hexsha
        build = f"<a href='https://github.com/kamekuro/netschoolbot/commit/{hash_}'>#{hash_[:7]}</a>"
    except:
        build = ""
    await utils.answer(
        message,
        f"‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:</b>\n\n" \
        f"üí´ <b>–í–µ—Ä—Å–∏—è:</b> <code>{'.'.join(list(map(str, list(version.__version__))))}</code> {build if build else ''}" \
        f"\nüå≥ <b>–í–µ—Ç–∫–∞:</b> <code>{version.branch}</code>\n" \
        f"üöÄ <b>–ü—Ä–æ—à–ª–æ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:</b> {str(datetime.timedelta(seconds=round(time.perf_counter() - utils.init_ts)))}\n" \
        f"üë§ <b>–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{utils.db.recvs('SELECT COUNT(*) FROM users')[0][0]}</code>"
    )


@other.on_message(
    filters.command(commands=["uid", "id", "–∞–π–¥–∏", "–∏–¥"])
)
async def get_uid(client: pyrogram.Client, message: types.Message):
    uid = await utils.getID(message)
    out = f"üÜî <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{uid}</code>"
    if uid < 1:
        uid = message.from_user.id
        out = f"üÜî <b>–í–∞—à ID:</b> <code>{uid}</code>"

    await utils.answer(
        message, out
    )


@other.on_message(
    filters.command(commands=["menu", "–º–µ–Ω—é"])
    | filters.text("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", False)
)
async def get_menu(client: pyrogram.Client, message: types.Message):
    await utils.answer(
        message,
        f"üóÇ <b>–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ì–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.</b>\n" \
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∏–∂–µ üëá",
        reply_markup=utils.getMenuKB(message.from_user.id) if message.chat.type == pyrogram.enums.chat_type.ChatType.PRIVATE else None
    )

@other.on_callback_query(
    filters.startswith("mmenu:")
)
async def get_menu_cb(client: pyrogram.Client, query: types.CallbackQuery):
    if query.from_user.id != int(query.data.split(":")[1]):
        return await query.answer(
            "‚ö† –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –í–∞—Å!", True
        )
    if (len(query.data.split(":")) > 2) and (query.data.split(":")[2] != "ndl"):
        msg_ids = [int(x) for x in query.data.split(":")[2].split(",")]
        await client.delete_messages(
            chat_id=query.message.chat.id,
            message_ids=msg_ids if msg_ids else None
        )
    if await cache.get(f"diary_{query.from_user.id}"):
        msg_ids = (await cache.get(f"diary_{query.from_user.id}"))['msgs_to_del']
        try:
            await client.delete_messages(
                chat_id=query.message.chat.id,
                message_ids=msg_ids if msg_ids else None
            )
        except:
            pass
        await cache.delete(f"diary_{query.from_user.id}")

    await query.message.delete()
    await utils.answer(
        query.message,
        f"üóÇ <b>–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ì–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.</b>\n" \
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∏–∂–µ üëá",
        reply_markup=utils.getMenuKB(query.from_user.id) if query.message.chat.type == pyrogram.enums.chat_type.ChatType.PRIVATE else None
    )


@other.on_message(
    filters.command(commands=["clearkeyboard", "clearkbd", "—É–±—Ä–∞—Ç—å–∫–Ω–æ–ø–∫–∏", "—É–±—Ä–∞—Ç—å–∫–ª–∞–≤—É"])
)
async def clearkbd(client: pyrogram.Client, message: types.Message):
    await utils.answer(
        message,
        f"‚å® <b>–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–±—Ä–∞–Ω–∞.</b>",
        reply_markup=types.ReplyKeyboardRemove()
    )


@other.on_message(
    filters.command(commands=["ping", "–ø–∏–Ω–≥"])
)
async def ping(client: pyrogram.Client, message: types.Message):
    ev = (datetime.datetime.now() - message.date).microseconds / 1000
    s = datetime.datetime.now()
    msg = await utils.answer(
        message, "‚ö°"
    )

    sapi = datetime.datetime.now()
    await client.get_chat(message.chat.id)
    eapi = round((datetime.datetime.now()-sapi).microseconds/1000, 2)

    kb = [
        [pyrogram.types.InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="ping")]
    ]
    kb = pyrogram.types.InlineKeyboardMarkup(kb)

    await utils.edit(
        msg,
        f"‚öô <b>–ü–æ–Ω–≥!</b>\n<b>Event latency: {int(ev)}ms | Handler took: " \
        f"{round((datetime.datetime.now()-s).microseconds/1000, 2)}ms | API: {eapi}ms</b>\n" \
        f"üöÄ <b>–ü—Ä–æ—à–ª–æ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:</b> {str(datetime.timedelta(seconds=round(time.perf_counter() - utils.init_ts)))}",
        reply_markup=kb
    )

@other.on_callback_query(
    filters.startswith("ping")
)
async def ping_cb(client: pyrogram.Client, query: types.CallbackQuery):
    s = datetime.datetime.now()
    msg = await utils.edit(
        query.message, "‚ö°"
    )
    ev = (datetime.datetime.now() - msg.date).microseconds / 1000

    sapi = datetime.datetime.now()
    await client.get_chat(msg.chat.id)
    eapi = round((datetime.datetime.now()-sapi).microseconds/1000, 2)

    kb = [
        [pyrogram.types.InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="ping")]
    ]
    kb = pyrogram.types.InlineKeyboardMarkup(kb)

    await utils.edit(
        msg,
        f"‚öô <b>–ü–æ–Ω–≥!</b>\n<b>Event latency: {int(ev)}ms | Handler took: " \
        f"{round((datetime.datetime.now()-s).microseconds/1000, 2)}ms | API: {eapi}ms</b>\n" \
        f"üöÄ <b>–ü—Ä–æ—à–ª–æ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:</b> {str(datetime.timedelta(seconds=round(time.perf_counter() - utils.init_ts)))}",
        reply_markup=kb
    )

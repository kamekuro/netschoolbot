#          ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñà  ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà
#          ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà ‚ñÄ ‚ñà ‚ñà‚ñà‚ñÑ ‚ñà ‚ñà ‚ñÄ‚ñÑ‚ñÑ‚ñÄ ‚ñà‚ñÄ‚ñÑ ‚ñà‚ñÑ‚ñà ‚ñÑ
#                ¬© Copyright 2024
#            ‚úà https://t.me/kamekuro

# üîí Licensed under CC-BY-NC-ND 4.0 unless otherwise specified.
# üåê https://creativecommons.org/licenses/by-nc-nd/4.0
# + attribution
# + non-commercial
# + no-derivatives

# You CANNOT edit, distribute or redistribute and use for any purpose this file without direct permission from the author.
# All source code is provided for review only.

import asyncio
import datetime
import httpx
import logging

import pyrogram
import pyroboard
from pyrogram import types

import netschoolapi as nsapi

import utils
from dispatch import filters
from dispatch.routing import Router


diary = Router("idiary")
logger = logging.getLogger(__name__)


# Choosing date

@diary.on_callback_query(
    filters.startswith("idiary:")
)
async def get_diary_from_inline(client: pyrogram.Client, query: types.CallbackQuery):
    if query.from_user.id != int(query.data.split(":")[1]):
        return await query.answer(
            "‚ö† –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –í–∞—Å!", True, cache_time=0
        )

    await query.answer(
        "üïì –ü–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶", True, cache_time=0
    )

    weekdays = {
        0: "–ü–ù", 1: "–í–¢", 2: "–°–†",
        3: "–ß–¢", 4: "–ü–¢", 5: "–°–ë",
        6: "–í–°",
    }
    user = utils.db.getUser(query.from_user.id)

    if not utils.db.getNSUser(query.from_user.id):
        return await utils.edit(
            query,
            f"ü§® <b>–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!</b>",
            reply_markup=types.InlineKeyboardMarkup([
                [types.InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=f"open_imenu:{query.from_user.id}"
                )]
            ])
        )

    try:
        ns = await utils.db.getUserNS(query.from_user.id)
        d = await ns.diary()
        schedule = sorted(d.schedule, key=lambda x: x.day)
        await ns.full_logout()
    except nsapi.errors.NetSchoolAPIError as e:
        return await utils.edit(
            query, e,
            reply_markup=types.InlineKeyboardMarkup([
                [types.InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=f"open_imenu:{query.from_user.id}"
                )]
            ])
        )

    if len(schedule) == 0:
        return await utils.edit(
            query,
            "‚òπ <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é.</b>",
            reply_markup=types.InlineKeyboardMarkup([
                [types.InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=f"open_imenu:{query.from_user.id}"
                )]
            ])
        )

    kb = pyroboard.InlineKeyboard(row_width=2)
    buttons = []
    for i in schedule:
        buttons.append(types.InlineKeyboardButton(
            callback_data=f"idiary_d:{i.day.strftime('%d.%m.%Y')}:this:{query.from_user.id}",
            text=f"{weekdays[i.day.weekday()]} {i.day.strftime('%d.%m.%Y')}"
        ))
    kb.add(*buttons)
    kb.row(
        types.InlineKeyboardButton(callback_data=f"idiary_w:prev:{query.from_user.id}", text="‚Üê –ü—Ä–µ–¥. –Ω–µ–¥–µ–ª—è"),
        types.InlineKeyboardButton(callback_data=f"idiary_w:next:{query.from_user.id}", text="‚Üí –°–ª–µ–¥. –Ω–µ–¥–µ–ª—è")
    )
    kb.row(
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=f"open_imenu:{query.from_user.id}")
    )

    await utils.edit(query, "üìÜ <b>–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å</b>", reply_markup=kb)



# Change week

@diary.on_callback_query(
    filters.startswith("idiary_w:")
)
async def get_week_inline(client: pyrogram.Client, query: types.CallbackQuery):
    if query.from_user.id != int(query.data.split(":")[2]):
        return await query.answer(
            "‚ö† –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –í–∞—Å!", True, cache_time=0
        )

    await query.answer(
        "üïì –ü–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶", True, cache_time=0
    )

    week = query.data.split(":")[1]
    need_week = utils.get_week(week)
    user = utils.db.getUser(query.from_user.id)
    weekdays = {
        0: "–ü–ù", 1: "–í–¢", 2: "–°–†",
        3: "–ß–¢", 4: "–ü–¢", 5: "–°–ë",
        6: "–í–°",
    }

    if not utils.db.getNSUser(query.from_user.id):
        return await utils.edit(
            query,
            f"ü§® <b>–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!</b>",
            reply_markup=types.InlineKeyboardMarkup([
                [types.InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=f"open_imenu:{query.from_user.id}"
                )]
            ])
        )

    try:
        ns = await utils.db.getUserNS(query.from_user.id)
        d = await ns.diary(start=need_week[0], end=need_week[1])
        schedule = sorted(d.schedule, key=lambda x: x.day)
        await ns.full_logout()
    except nsapi.errors.NetSchoolAPIError as e:
        return await utils.edit(
            query, e,
            reply_markup=types.InlineKeyboardMarkup([
                [types.InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=f"open_imenu:{query.from_user.id}"
                )]
            ])
        )

    if len(schedule) == 0:
        return await utils.edit(
            query,
            "‚òπ <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é.</b>",
            reply_markup=types.InlineKeyboardMarkup([
                [types.InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=f"open_imenu:{query.from_user.id}"
                )]
            ])
        )

    kb = pyroboard.InlineKeyboard(row_width=2)
    buttons = []
    for i in schedule:
        buttons.append(types.InlineKeyboardButton(
            callback_data=f"idiary_d:{i.day.strftime('%d.%m.%Y')}:{week}:{query.from_user.id}",
            text=f"{weekdays[i.day.weekday()]} {i.day.strftime('%d.%m.%Y')}"
        ))
    kb.add(*buttons)
    week_kbs = [
        types.InlineKeyboardButton(
            callback_data=f"idiary_w:prev:{query.from_user.id}", text="‚Üê –ü—Ä–µ–¥. –Ω–µ–¥–µ–ª—è"
        ),
        types.InlineKeyboardButton(
            callback_data=f"idiary_w:next:{query.from_user.id}", text="‚Üí –°–ª–µ–¥. –Ω–µ–¥–µ–ª—è"
        )
    ]
    if week in ["prev", "next"]:
        week_kbs = [types.InlineKeyboardButton(
            callback_data=f"idiary_w:this:{query.from_user.id}",
            text=f"{'‚Üí' if week == 'prev' else '‚Üê'} –ù—ã–Ω–µ—à–Ω. –Ω–µ–¥–µ–ª—è"
        )]
    kb.row(*week_kbs)
    kb.row(
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=f"open_imenu:{query.from_user.id}")
    )

    await utils.edit(query, "üìÜ <b>–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å</b>", reply_markup=kb)



# Get the info about the day

@diary.on_callback_query(
    filters.startswith("idiary_d:")
)
async def get_day_inline(client: pyrogram.Client, query: types.CallbackQuery):
    if query.from_user.id != int(query.data.split(":")[3]):
        return await query.answer(
            "‚ö† –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –í–∞—Å!", True, cache_time=0
        )

    await query.answer(
        "üïì –ü–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶", True, cache_time=0
    )

    if not utils.db.getNSUser(query.from_user.id):
        return await utils.edit(
            query,
            f"ü§® <b>–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!</b>",
            reply_markup=types.InlineKeyboardMarkup([
                [types.InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=f"open_imenu:{query.from_user.id}"
                )]
            ])
        )

    day = datetime.datetime.strptime(query.data.split(":")[1], "%d.%m.%Y")
    week = query.data.split(":")[2]
    need_week = utils.get_week(week) if week != "not_week" else utils.get_week(day)
    user = utils.db.getUser(query.from_user.id)
    weekdays = {
        0: "–ü–ù", 1: "–í–¢", 2: "–°–†",
        3: "–ß–¢", 4: "–ü–¢", 5: "–°–ë",
        6: "–í–°",
    }


    try:
        ns = await utils.db.getUserNS(query.from_user.id)
        d = await ns.diary(start=need_week[0], end=need_week[1])
        nsUser = await ns.mysettings()
        schedule = d.schedule
    except nsapi.errors.NetSchoolAPIError as e:
        return await utils.edit(
            query, e,
            reply_markup=types.InlineKeyboardMarkup([
                [types.InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=f"open_imenu:{query.from_user.id}"
                )]
            ])
        )

    d = None
    logger.error(schedule)
    for i in schedule:
        if i.day.strftime("%d.%m.%Y") == day.strftime("%d.%m.%Y"):
            d = i
    if not d:
        await ns.full_logout()
        return await utils.edit(
            query,
            f"‚òπ <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è</b>",
            reply_markup=types.InlineKeyboardMarkup([
                [types.InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥", callback_data=f"idiary_w:{week}:{query.from_user.id}"
                )]
            ])
        )

    ltypes = {
        "subject": ["üìö", "–ø—Ä–µ–¥–º–µ—Ç"],
        "ea": ["üß©", "—Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤"]
    }

    lessons = []
    for lessn in d.lessons:
        ltype = "subject"
        if lessn.is_ea_lesson: ltype = "ea"
        hw, hw_desc, marks, debts = "", "", [], []
        for ass in lessn.assignments:
            if ass.mark:
                marks.append(str(ass.mark))
            if ass.type == "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ":
                try:
                    homework: dict = await ns.request(
                        "GET", f"student/diary/assigns/{ass.id}",
                        params={
                            "studentId": nsUser.user_settings.user_id
                        }
                    )
                    hw = homework['assignmentName']
                    if homework.get("description"):
                        hw_desc = homework['description']
                except:
                    hw = ass.content
            if ass.is_duty:
                debts.append(f"{ass.type}" + (f": {ass.content}" if ass.content else ""))
        out = f"{ltypes[ltype][0]} <b>{lessn.number}. {ltypes[ltype][1].title()}: {lessn.subject}</b>" \
              f"\nü™ë <b>–ö–∞–±–∏–Ω–µ—Ç:</b> <b><i>{lessn.room if lessn.room else '–Ω–µ —É–∫–∞–∑–∞–Ω'}</i></b>" \
              f"\n‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> <b><i>{lessn.start.strftime('%H:%M')} ‚Äî {lessn.end.strftime('%H:%M')}</i></b>"
        if hw:
            out += f"\nüìù <b>–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:</b> {hw}"
        if hw_desc:
            out += f"\n‚ùï <b>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—Ç —É—á–∏—Ç–µ–ª—è</b>:\n<blockquote expandable>{hw_desc}</blockquote>"
        if marks:
            out += f"\nüíÆ <b>–û—Ü–µ–Ω–∫{'–∞' if len(marks) == 1 else '–∏'}:</b> {', '.join(marks)}"
        if len(debts) > 0:
            out += f"\n‚ùó <b><u>–ó–∞ —ç—Ç–æ—Ç —É—Ä–æ–∫ —É –í–∞—Å —Å—Ç–æ{'–∏' if len(debts) == 1 else '—è'}—Ç ¬´—Ç–æ—á–∫{'–∞' if len(debts) == 1 else '–∏'}¬ª –∑–∞:</b></u>"
            for debt in debts:
                out += f"\n  ‚ñ™Ô∏è <b>{debt}</b>"
        lessons.append(out)
    out = f"üìÜ <b>{day.strftime('%d.%m.%Y')}</b>\n\n\n" + "\n\n\n".join(lessons)

    await ns.full_logout()
    logger.error(out)

    kb = pyroboard.InlineKeyboard(1)

    if len(out) <= 4096:
        kb.row(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥", callback_data=f"idiary_w:{week}:{query.from_user.id}")
        )
        await utils.edit(
            query, out, reply_markup=kb
        )
    else:
        strday = day.strftime("%dT%mT%Y")
        kb.row(*[
            types.InlineKeyboardButton(
                text="‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É",
                url=f"https://t.me/{client.me.username}?start=dfi_{strday}"
            ),
            types.InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥", callback_data=f"idiary_w:{week}:{query.from_user.id}"
            )
        ])
        return await utils.edit(
            query,
            f"‚òπ <b>–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –ª—Å —Å –±–æ—Ç–æ–º.</b>\n"  \
            f"–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å",
            reply_markup=kb
        )